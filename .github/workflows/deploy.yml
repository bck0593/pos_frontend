# .github/workflows/deploy.yml
name: Deploy Frontend to Azure Web App

on:
  push:
    branches: ["main"]
  workflow_dispatch:

concurrency:
  group: deploy-frontend-azure
  cancel-in-progress: false

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    env:
      APP_NAME: app-002-gen10-step3-1-node-oshima29
      NEXT_TELEMETRY_DISABLED: "1"
      NEXT_DISABLE_ESLINT_PLUGIN: "true"
      NEXT_PUBLIC_BACKEND_URL: https://app-002-gen10-step3-1-py-oshima29.azurewebsites.net
      NEXT_PUBLIC_API_BASE: https://app-002-gen10-step3-1-py-oshima29.azurewebsites.net
      NEXT_PUBLIC_API_BASE_URL: https://app-002-gen10-step3-1-py-oshima29.azurewebsites.net

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: "22"
          cache: "npm"

      - name: Install jq (for polling)
        run: |
          sudo apt-get update
          sudo apt-get install -y jq

      # devDependencies も入れる（patch-package を確実に動かす）
      - name: Install deps (incl. dev)
        env:
          NODE_ENV: ""
        run: |
          set -e
          npm config set ignore-scripts false
          npm ci --include=dev
          npx patch-package --version || true

      - name: Build (Next.js standalone)
        env:
          NEXT_PUBLIC_BACKEND_URL: ${{ env.NEXT_PUBLIC_BACKEND_URL }}
          NEXT_PUBLIC_API_BASE: ${{ env.NEXT_PUBLIC_API_BASE }}
          NEXT_PUBLIC_API_BASE_URL: ${{ env.NEXT_PUBLIC_API_BASE_URL }}
        run: |
          set -e
          npm run build --no-lint
          ls -la .next || true
          ls -la .next/standalone || true

      - name: Prepare artifact
        run: |
          set -e
          rm -rf out && mkdir -p out
          # 1) Next standalone
          cp -a .next/standalone/. out/
          # 2) static
          mkdir -p out/.next
          cp -a .next/static out/.next/static
          # 3) server (App Router)
          if [ -d ".next/server" ]; then
            mkdir -p out/server
            cp -a .next/server/. out/server/
          fi
          # 4) public
          if [ -d public ]; then cp -a public out/public; fi
          # 5) version.txt（反映確認用）
          mkdir -p out/public
          echo "commit=$(git rev-parse --short HEAD) time=$(date -u +%Y-%m-%dT%H:%M:%SZ)" > out/public/version.txt
          # 6) run package.json
          node -e "const fs=require('fs');fs.writeFileSync('out/package.json', JSON.stringify({
            name:'next-standalone',
            version:'0.0.0',
            private:true,
            type:'commonjs',
            main:'server.js',
            scripts:{ start:'HOST=0.0.0.0 PORT=${PORT:-8080} node server.js' },
            engines:{ node: '>=22' }
          }, null, 2));"
          # 7) manifests
          cp -a .next/*.json out/.next/ 2>/dev/null || true
          cp .next/BUILD_ID out/.next/BUILD_ID 2>/dev/null || true
          ls -la out || true
          ls -la out/public || true

      - name: Zip artifact
        run: |
          set -e
          cd out
          zip -r ../site.zip .
          cd ..
          ls -lh site.zip

      # 発行プロファイル XML から最初に見つかった publishProfile の userName/userPWD を抽出して Kudu に投げる
      - name: Deploy via Kudu ZIP Deploy (async + poll)
        env:
          PUBLISH_PROFILE: ${{ secrets.AZURE_WEBAPP_PUBLISH_PROFILE }}
        run: |
          set -euo pipefail

          # どの publishMethod でもOK（MSDeploy/ZipDeploy/FTP 等）から最初の userName/userPWD を抜く
          USER=$(echo "$PUBLISH_PROFILE" | sed -n 's/.*publishProfile[^>]*userName="\([^"]*\)".*/\1/p' | head -n1)
          PASS=$(echo "$PUBLISH_PROFILE" | sed -n 's/.*publishProfile[^>]*userPWD="\([^"]*\)".*/\1/p' | head -n1)

          if [ -z "${USER:-}" ] || [ -z "${PASS:-}" ]; then
            echo "::error ::Failed to parse publish profile credentials"
            exit 1
          fi

          BASE="https://${APP_NAME}.scm.azurewebsites.net"

          echo "Uploading site.zip (async) to $BASE ..."
          curl -fSs -u "$USER:$PASS" \
            -X POST "$BASE/api/zipdeploy?isAsync=true" \
            -H "Content-Type: application/zip" \
            --data-binary @site.zip

          echo "Polling deployment status..."
          for i in $(seq 1 80); do
            INFO=$(curl -sS -u "$USER:$PASS" "$BASE/api/deployments/latest" || true)
            STATUS=$(echo "$INFO" | jq -r '.status // empty')
            TEXT=$(echo "$INFO" | jq -r '.statusText // empty')
            echo "[$i] status=${STATUS:-n/a} ${TEXT:-}"
            if [ "$STATUS" = "4" ]; then
              echo "Deployment finished (SUCCESS)."
              break
            fi
            if [ "$STATUS" = "3" ]; then
              echo "::error ::Kudu deployment failed"
              echo "$INFO"
              exit 1
            fi
            sleep 3
          done

      - name: Warmup & check version.txt
        run: |
          set -e
          ROOT="https://${{ env.APP_NAME }}.azurewebsites.net"
          VER="$ROOT/version.txt"
          echo "Warmup $ROOT"
          for i in $(seq 1 40); do
            code=$(curl -s -o /dev/null -w '%{http_code}' "$ROOT")
            echo "Try $i root: $code"
            [ "$code" = "200" ] && break
            sleep 3
          done
          echo "Check $VER"
          curl -fsSL "$VER" || (echo "::error ::version.txt not reachable" && exit 1)
