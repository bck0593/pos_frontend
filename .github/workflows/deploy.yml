# .github/workflows/deploy.yml
name: Deploy Frontend to Azure Web App

on:
  push:
    branches: [ "main" ]
    paths:
      - ".github/workflows/deploy.yml"
      - "**/*"
  workflow_dispatch:

concurrency:
  group: deploy-frontend-azure
  cancel-in-progress: false

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    env:
      # ---- Azure Web App name (Linux, Node 22 コンテナ) ----
      AZURE_WEBAPP_NAME: app-002-gen10-step3-1-node-oshima29

      # ---- Next.js/Build 環境 ----
      NODE_ENV: production
      NEXT_TELEMETRY_DISABLED: "1"
      NEXT_DISABLE_ESLINT_PLUGIN: "true"

      # ---- 重要：ビルド時に Rewrites の宛先を焼き込む ----
      NEXT_PUBLIC_BACKEND_URL: https://app-002-gen10-step3-1-py-oshima29.azurewebsites.net
      NEXT_PUBLIC_API_BASE: https://app-002-gen10-step3-1-py-oshima29.azurewebsites.net
      NEXT_PUBLIC_API_BASE_URL: https://app-002-gen10-step3-1-py-oshima29.azurewebsites.net

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Sanity check repo root
        run: |
          echo "repo root:"; pwd; ls -la
          test -f package.json || (echo "::error ::package.json not found at repo root"; exit 1)

      # lock があればキャッシュ、無ければ通常セットアップ
      - name: Setup Node (with cache)
        if: ${{ hashFiles('package-lock.json') != '' }}
        uses: actions/setup-node@v4
        with:
          node-version: "22"
          cache: "npm"
          cache-dependency-path: package-lock.json

      - name: Setup Node (no cache fallback)
        if: ${{ hashFiles('package-lock.json') == '' }}
        uses: actions/setup-node@v4
        with:
          node-version: "22"

      - name: Install & Build (Next.js standalone)
        run: |
          set -e
          npm ci
          npm run build --no-lint

          echo "=== list .next ==="; ls -la .next || true
          echo "=== list .next/standalone ==="; ls -la .next/standalone || true
          echo "=== list .next/static ==="; ls -la .next/static || true

          # バックエンド URL がバンドルに含まれているか簡易チェック（失敗時は落とす）
          echo "=== sanity check: backend URL embedded ==="
          (grep -R "app-002-gen10-step3-1-py-oshima29" -n .next || (echo "::error ::Backend URL not found in client bundle"; exit 1))

      - name: Prepare artifact (standalone runtime)
        run: |
          set -e
          rm -rf out && mkdir -p out/.next

          # ---- サーバ（standalone）一式 ----
          cp -r .next/standalone/* out/

          # ---- 静的資産（必須）----
          cp -r .next/static out/.next/static

          # ---- BUILD_ID（必須）----
          cp .next/BUILD_ID out/.next/BUILD_ID

          # ---- public（あれば）----
          if [ -d public ]; then cp -r public out/public; fi

          # ---- 最小 package.json（pre/post スクリプト無・安全）----
          node -e "const fs=require('fs');const pj={ \
            name:'next-standalone', version:'0.0.0', private:true, \
            type:'commonjs', main:'server.js', engines:{node:'>=18'}, \
            scripts:{ start:'node server.js' } \
          }; fs.writeFileSync('out/package.json', JSON.stringify(pj,null,2));"

          # ---- Windows/IIS 向け web.config（Linuxでは無視されるが無害）----
          cat > out/web.config << 'EOF'
          <?xml version="1.0" encoding="utf-8"?>
          <configuration>
            <system.webServer>
              <handlers>
                <add name="iisnode" path="server.js" verb="*" modules="iisnode" />
              </handlers>
              <rewrite>
                <rules>
                  <rule name="DynamicContent" stopProcessing="true">
                    <match url=".*" />
                    <action type="Rewrite" url="server.js" />
                  </rule>
                </rules>
              </rewrite>
              <staticContent>
                <remove fileExtension=".json" />
                <mimeMap fileExtension=".json" mimeType="application/json" />
              </staticContent>
            </system.webServer>
          </configuration>
          EOF

          echo "=== out tree (top) ==="; ls -la out
          echo "=== out/.next ==="; ls -la out/.next
          test -f out/server.js || (echo '::error ::server.js missing in out/' && exit 1)
          test -f out/.next/BUILD_ID || (echo '::error ::BUILD_ID missing in out/.next/' && exit 1)

      # Azure 側の OneDeploy 競合回避
      - name: Sleep (avoid SCM race)
        run: sleep 8

      - name: Deploy to Azure Web App
        uses: azure/webapps-deploy@v3
        with:
          app-name: ${{ env.AZURE_WEBAPP_NAME }}
          publish-profile: ${{ secrets.AZURE_WEBAPP_PUBLISH_PROFILE }}
          package: ./out
          clean: true
