# .github/workflows/deploy.yml
name: Deploy Frontend to Azure Web App

on:
  push:
    branches: [ "main" ]
    paths:
      - ".github/workflows/deploy.yml"
      - "**/*"
  workflow_dispatch:

concurrency:
  group: deploy-frontend-azure
  cancel-in-progress: false

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    env:
      AZURE_WEBAPP_NAME: app-002-gen10-step3-1-node-oshima29
      NODE_ENV: production
      NEXT_TELEMETRY_DISABLED: "1"
      NEXT_DISABLE_ESLINT_PLUGIN: "true"
      NEXT_PUBLIC_BACKEND_URL: https://app-002-gen10-step3-1-py-oshima29.azurewebsites.net
      NEXT_PUBLIC_API_BASE: https://app-002-gen10-step3-1-py-oshima29.azurewebsites.net
      NEXT_PUBLIC_API_BASE_URL: https://app-002-gen10-step3-1-py-oshima29.azurewebsites.net

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Sanity check repo root
        run: |
          echo "repo root:"; pwd; ls -la
          test -f package.json || (echo "::error ::package.json not found at repo root"; exit 1)

      # Node 22 でビルド
      - name: Setup Node (with cache)
        if: ${{ hashFiles('package-lock.json') != '' }}
        uses: actions/setup-node@v4
        with:
          node-version: "22"
          cache: "npm"
          cache-dependency-path: package-lock.json

      - name: Setup Node (no cache fallback)
        if: ${{ hashFiles('package-lock.json') == '' }}
        uses: actions/setup-node@v4
        with:
          node-version: "22"

      # 環境変数がビルドに埋め込まれることを明示
      - name: Install & Build (Next.js standalone)
        env:
          NEXT_PUBLIC_BACKEND_URL: ${{ env.NEXT_PUBLIC_BACKEND_URL }}
          NEXT_PUBLIC_API_BASE: ${{ env.NEXT_PUBLIC_API_BASE }}
          NEXT_PUBLIC_API_BASE_URL: ${{ env.NEXT_PUBLIC_API_BASE_URL }}
        run: |
          set -e
          npm ci
          node -e "console.log('API_BASE=', process.env.NEXT_PUBLIC_API_BASE)"
          npm run build --no-lint
          ls -la .next || true
          ls -la .next/standalone || true
          ls -la .next/static || true

      - name: Prepare artifact (standalone runtime)
        run: |
          set -e
          rm -rf out && mkdir -p out
          # 1) standalone 展開（server.js / 最小 node_modules を含む）
          cp -a .next/standalone/. out/
          # 2) 静的アセット
          mkdir -p out/.next
          cp -a .next/static out/.next/static
          # 3) マニフェスト群
          cp -a .next/*.json out/.next/ 2>/dev/null || true
          cp .next/BUILD_ID out/.next/BUILD_ID
          # 4) App Router 実体
          if [ -d ".next/server" ]; then
            mkdir -p out/server
            cp -a .next/server/. out/server/
          fi
          # 5) public
          if [ -d public ]; then cp -a public out/public; fi
          # 6) 実行用 package.json（HOST/PORT 指定）
          node -e "const fs=require('fs');const pj={
            name:'next-standalone',
            version:'0.0.0',
            private:true,
            type:'commonjs',
            main:'server.js',
            engines:{node:'>=22'},
            scripts:{ start:'HOST=0.0.0.0 PORT=${PORT:-8080} node server.js' }
          }; fs.writeFileSync('out/package.json', JSON.stringify(pj,null,2));"
          # （Linuxでは無視されるが）web.config は残してOK
          cat > out/web.config << 'EOF'
          <?xml version="1.0" encoding="utf-8"?>
          <configuration>
            <system.webServer>
              <handlers>
                <add name="iisnode" path="server.js" verb="*" modules="iisnode" />
              </handlers>
              <rewrite>
                <rules>
                  <rule name="DynamicContent" stopProcessing="true">
                    <match url=".*" />
                    <action type="Rewrite" url="server.js" />
                  </rule>
                </rules>
              </rewrite>
              <staticContent>
                <remove fileExtension=".json" />
                <mimeMap fileExtension=".json" mimeType="application/json" />
              </staticContent>
            </system.webServer>
          </configuration>
          EOF
          # 必須チェック
          test -f out/server.js || (echo '::error ::server.js missing in out/' && exit 1)
          test -f out/.next/BUILD_ID || (echo '::error ::BUILD_ID missing in out/.next/' && exit 1)
          test -d out/server/app || (echo '::error ::out/server/app missing (App Router not included)' && exit 1)

      # ★ OneDeploy をやめて ZIP Deploy (Kudu /zipdeploy) に切り替え
      - name: Zip artifact
        run: |
          cd out
          zip -r ../site.zip .
          cd ..
          ls -lh site.zip

      - name: Deploy via Kudu ZIP Deploy (synchronous)
        env:
          PUBLISH_PROFILE: ${{ secrets.AZURE_WEBAPP_PUBLISH_PROFILE }}
          APP_NAME: ${{ env.AZURE_WEBAPP_NAME }}
        run: |
          set -euo pipefail
          # publishProfile からユーザーとパスワードを抽出
          USER=$(echo "$PUBLISH_PROFILE" | grep -oP 'userName="\K[^"]+')
          PASS=$(echo "$PUBLISH_PROFILE" | grep -oP 'userPWD="\K[^"]+')
          # Kudu の zipdeploy に同期アップロード
          DEPLOY_URL="https://${APP_NAME}.scm.azurewebsites.net/api/zipdeploy?isAsync=false"
          curl -sS -u "$USER:$PASS" \
            -X POST "$DEPLOY_URL" \
            -H "Content-Type: application/zip" \
            --data-binary @site.zip
          echo "Deployed via ZIP Deploy."

      # おまけ：起動ヘルス確認（HTTP 200 になるまで最大 3 分待機）
      - name: Warmup & health check
        run: |
          set -e
          URL="https://${{ env.AZURE_WEBAPP_NAME }}.azurewebsites.net"
          echo "Waiting for $URL ..."
          for i in $(seq 1 36); do
            code=$(curl -s -o /dev/null -w '%{http_code}' "$URL")
            echo "Try $i: $code"
            if [ "$code" = "200" ] || [ "$code" = "304" ]; then
              echo "App is up."
              exit 0
            fi
            sleep 5
          done
          echo "::error ::App did not become healthy in time"
          exit 1
