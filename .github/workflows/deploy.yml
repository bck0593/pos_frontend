name: Deploy Frontend to Azure Web App

on:
  push:
    branches: ["main"]
  workflow_dispatch:

concurrency:
  group: deploy-frontend-azure
  cancel-in-progress: false

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    env:
      APP_NAME: app-002-gen10-step3-1-node-oshima29
      NEXT_TELEMETRY_DISABLED: "1"
      NEXT_DISABLE_ESLINT_PLUGIN: "true"
      NEXT_PUBLIC_BACKEND_URL: https://app-002-gen10-step3-1-py-oshima29.azurewebsites.net
      NEXT_PUBLIC_API_BASE: https://app-002-gen10-step3-1-py-oshima29.azurewebsites.net
      NEXT_PUBLIC_API_BASE_URL: https://app-002-gen10-step3-1-py-oshima29.azurewebsites.net

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: "22"
          cache: "npm"

      - name: Install deps (include dev & enable postinstall)
        env:
          NODE_ENV: ""
        run: |
          set -e
          npm config set ignore-scripts false
          npm ci --include=dev
          npx patch-package --version || true

      - name: Build (Next.js standalone)
        env:
          NEXT_PUBLIC_BACKEND_URL: ${{ env.NEXT_PUBLIC_BACKEND_URL }}
          NEXT_PUBLIC_API_BASE: ${{ env.NEXT_PUBLIC_API_BASE }}
          NEXT_PUBLIC_API_BASE_URL: ${{ env.NEXT_PUBLIC_API_BASE_URL }}
        run: |
          set -e
          npm run build --no-lint
          ls -la .next || true
          ls -la .next/standalone || true

      - name: Prepare artifact for Run-From-Package
        run: |
          set -e
          rm -rf out && mkdir -p out
          # 1) Next standalone
          cp -a .next/standalone/. out/
          # 2) static assets
          mkdir -p out/.next
          cp -a .next/static out/.next/static
          # 3) server (App Router)
          if [ -d ".next/server" ]; then
            mkdir -p out/server
            cp -a .next/server/. out/server/
          fi
          # 4) public
          if [ -d public ]; then cp -a public out/public; fi
          # 5) version.txt to verify after deploy
          mkdir -p out/public
          echo "commit=$(git rev-parse --short HEAD) time=$(date -u +%Y-%m-%dT%H:%M:%SZ)" > out/public/version.txt
          # 6) start package.json
          node -e "const fs=require('fs');fs.writeFileSync('out/package.json', JSON.stringify({
            name:'next-standalone',
            version:'0.0.0',
            private:true,
            type:'commonjs',
            main:'server.js',
            scripts:{ start:'HOST=0.0.0.0 PORT=${PORT:-8080} node server.js' },
            engines:{ node: '>=22' }
          }, null, 2));"
          # 7) manifests
          cp -a .next/*.json out/.next/ 2>/dev/null || true
          cp .next/BUILD_ID out/.next/BUILD_ID 2>/dev/null || true
          # zip
          (cd out && zip -r ../site.zip .)
          ls -lh site.zip

      # 公式アクションで Zip Deploy（publish profile をそのまま渡す）
      - name: Deploy to Azure WebApp (Run-From-Package)
        uses: azure/webapps-deploy@v2
        with:
          app-name: ${{ env.APP_NAME }}
          publish-profile: ${{ secrets.AZURE_WEBAPP_PUBLISH_PROFILE }}
          package: site.zip

      - name: Warmup (root 200)
        run: |
          set -e
          URL_ROOT="https://${APP_NAME}.azurewebsites.net"
          echo "Warming up $URL_ROOT ..."
          for i in $(seq 1 40); do
            code=$(curl -s -o /dev/null -w '%{http_code}' "$URL_ROOT")
            echo "Try $i root: $code"
            [ "$code" = "200" ] && exit 0
            sleep 3
          done
          echo "::error ::App did not become healthy in time"
          exit 1
